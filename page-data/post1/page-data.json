{"componentChunkName":"component---src-templates-blog-post-js","path":"/post1/","result":{"data":{"site":{"siteMetadata":{"title":"HYEOK's SoftWare"}},"markdownRemark":{"id":"70136351-afbd-50e6-a1bb-7a861fa62d86","excerpt":"프로세스 (Process) 프로세스란 실행 중인 프로그램으로 디스크로부터 메모리에 적재되어 CPU…","html":"<ul>\n<li>\n<p><strong>프로세스 (Process)</strong></p>\n<ul>\n<li><strong>프로세스란 실행 중인 프로그램으로 디스크로부터 메모리에 적재되어 CPU의 할당을 받을 수 있는 것을 말한다.</strong> 운영체제로부터 주소 공간, 파일, 메모리 등을 할당 받으며 이것들을 총칭하여 프로세스라고 한다. 프로세스는 함수의 매개변수, 복귀 주소, 로컬 변수와 같은 임시 자료를 갖는 <strong>프로세스 스택과</strong> 전역 변수들을 수록하는 <strong>데이터 섹션</strong>을 포함한다. 또한 프로세스 실행 중에 <strong>동적으로 할당되는 메모리인 힙을 포함</strong>한다.</li>\n<li><strong>프로세스 제어 블록(Process Control Block, PCB)</strong>\n<ul>\n<li><strong>PBC</strong> 는 특정 <strong>프로세스에 대한 중요한 정보를 저장 하고 있는 운영체제의 자료구조</strong>이다. 운영체제는 프로세스를 관리하기 위해 프로세스 생성과 동시에 고유한 PCB를 생성 한다 <strong>프로세스는</strong> CPU 를 할당 받아 작업을 처리하다가도 <strong>프로세스 전환이 발생하면</strong> 진행하던 작업을 저장하고 CPU 를 반환해야 하는데, 이때 <strong>작업의 진행 상황 모두 PCB에 저장</strong>하게 된다 그리고 <strong>다시 CPU 를 할당 받게 되면</strong> <strong>PCB에 있던 내용을 불러와 이전에 종료됐던 시점부터 다시 작업을 수행</strong>한다.</li>\n<li><strong>PCB에 저장되는 정보</strong>\n<ul>\n<li><strong>프로세스 식별자(ProcessID, PID): 프로세스 식별번호</strong></li>\n<li><strong>프로세스 상태: new, ready, running, waiting, terminated 등의 상태 저장</strong></li>\n<li><strong>프로그램 카운터: 프로세스가 다음에 실행할 명령어의 주소</strong></li>\n<li><strong>CPU 레지스터</strong></li>\n<li><strong>CPU 스케쥴링 정보: 프로세스의 우선순위, 스케줄 큐에 대한 포인터 등</strong></li>\n<li><strong>메모리 관리 정보: 페이지 테이블 또는 세그먼트 테이블 등과 같은 정보를 포함</strong></li>\n<li><strong>입출력 상태 정보: 프로세스에 할당된 입출력 장치들과 열린 파일 목록</strong></li>\n<li><strong>어카운팅 정보: 사용된 CPU 시간, 시간제한, 계정정보 등</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>스레드 (Thread)</strong></p>\n<ul>\n<li><strong>스레드란 프로세스의 실행 단위</strong>라고 할 수 있다. 한 프로세스 내에서 동작되는 여러 실행 흐름으로 프로세스 내의 주소공간이나 자원을 공유할 수 있다. 스레드는 <strong>스레드 ID, 프로그램 카운터, 레지스터 집합, 스택으로 구성</strong>된다. 같은 프로세스에 속한 다른 스레드와 코드, 데이터 섹션, 그리고 열린 파일이나 신호와 같은 운영체제 자원들을 공유한다. <strong>하나의 프로세스를 다수의 스레드로 구분하여 자원을 공유하고 자원의 생성과 관리의 중복성을 최소화하여 수행 능력을 향상시키는 것을 멀티스레딩</strong>이라고 한다. 이 경우 각각의 <strong>스레드는 독립적인 작업을 수행해야 하기 때문에 각자의 스택과 PC 레지스터</strong> 값을 갖고 있다.</li>\n<li><strong>스택을 스레드 마다 독립적으로 할당하는 이유</strong>\n<ul>\n<li>스택은 함수 호출 시 전달되는 인자, 되돌아갈 주소값 및 함수 내에서 선언하는 변수 등을 저장하기 위해 사용되는 메모리 공간이므로 스택 메모리 공간이 독립적이라는 것은 독립적인 함수 호출이 가능하다는 것이고 이는 독립적인 실행 흐름이 추가되는 것이다. 따라서 스레드의 정의에 따라 <strong>독립적인 실행 흐름을 추가하기 위한 최소 조건으로 독립된 스택을 할당</strong>한다.</li>\n<li><strong>PC Register를 스레드마다 독립적으로 할당하는 이유</strong>\n<ul>\n<li>PC 값은 스레드가 명령어 어디까지 수행했는지를 나타낸다. 스레드는 CPU를 할당받았다가 스케줄러에 의해 다시 선점당한다. 그렇기 때문에 명령어가 연속적으로 수행되지 못하고 <strong>어느 부분까지 수행했는지 기억할 필요가 있기 때문에 PC Register를 독립적으로 할당</strong>한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"프로세스와 스레드의 차이","date":"June 10, 2022","description":null}},"previous":null,"next":{"fields":{"slug":"/post2/"},"frontmatter":{"title":"멀티 스레드"}}},"pageContext":{"id":"70136351-afbd-50e6-a1bb-7a861fa62d86","previousPostId":null,"nextPostId":"a9a78922-b587-503e-bcbd-0e246c8d2dd0"}},"staticQueryHashes":["2841359383","3257411868"]}