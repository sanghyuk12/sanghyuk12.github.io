{"componentChunkName":"component---src-templates-blog-post-js","path":"/post2/","result":{"data":{"site":{"siteMetadata":{"title":"HYUK's SoftWare"}},"markdownRemark":{"id":"a9a78922-b587-503e-bcbd-0e246c8d2dd0","excerpt":"멀티 스레딩의 장점 프로세스를 이용하여 동시에 처리하던 일을 스레드로 구현할 경우 메모리 공간과 시스템 자원 감소가 줄어들게 된다. 스레드 간의 통신이 필요한 경우에도 별도의 자원을 이용하는 것이 아니라 전역 변수의 공간 또는 동적으로 할당된 공간인 Heap…","html":"<ul>\n<li><strong>멀티 스레딩의 장점</strong>\n<ul>\n<li>프로세스를 이용하여 동시에 처리하던 일을 <strong>스레드로 구현할 경우 메모리 공간과 시스템 자원 감소가 줄어들게 된다.</strong> 스레드 간의 통신이 필요한 경우에도 별도의 자원을 이용하는 것이 아니라 <strong>전역 변수의 공간 또는 동적으로 할당된 공간인 Heap 영역을 이용하여 데이터를 주고받을 수 있다.</strong> 그렇기 때문에 프로세스 간 통신 방법에 비해 스레드 간의 통신방법이 더 간단하다. <strong>context swtich 또한</strong> 스레드가 프로세스와 달리 <strong>캐시 메모리를 비울 필요가 없기 때문에 더 빠르다.</strong> 따라서 시스템의 <strong>throughput 이 향상되고 자원 소모가 줄어들며</strong> 자연스럽게 <strong>프로그램의 응답 시간이 단축</strong>된다.</li>\n</ul>\n</li>\n<li><strong>멀티 스레딩의 문제점</strong>\n<ul>\n<li>멀티 프로세스 기반으로 프로그래밍 시에는 프로세스간 공유하는 자원이 없기 때문에 <strong>동일한 자원에 동시에 접근하는일</strong>이 없지만 멀티 스레딩 기반으로 프로그래밍할 때는 <strong>이 부분을 신경 써줘야 한다.</strong> 서로 다른 스레드가 <strong>데이터와 힙영역을 공유하기 때문</strong>에 어떤 스레드가 다른 스레드에서 사용중인 변수나 자료구조에 접근하여 엉뚱한 값을 읽어오거나 수정할 수 있다. 그렇기 때문에 <strong>멀티스레딩 환경에서는 동기화 작업</strong>이 필요하다. 동기화를 통해 작업 처리 순서를 컨트롤 하고 공유 자원에 대한 접근을 컨트롤한다. 하지만 <strong>이로 인해 병목현상이 발생하여 성능이 저하될 가능성이 높다. 그러므로 과도한 락으로 인한 병목현상을 줄여야 한다.</strong></li>\n</ul>\n</li>\n<li><strong>멀티 스레드 vs 멀티 프로세스</strong>\n<ul>\n<li>멀티 스레드는 멀티 프로세스보다 적은 <strong>메모리 공간을 차지하고 문맥 전환이 빠르다.</strong> 하지만 오류로 인해 <strong>하나의 스레드가 종료되면 전체 스레드가 종료될 수 있다</strong>는 점과 <strong>동기화 문제</strong>를 안고 있다. 반면 멀티 프로세스 방식은 하나의 프로세스가 죽더라도 다른 프로세스에 영향을 끼치지 않고 정상적으로 수행된다는 장점이 있지만, 멀티 스레드보다 많은 메모리 공간과 CPU 시간을 차지한다는 단점이존재한다. 따라서 <strong>대상 시스템의 적합한 동작 방식을 선택</strong>하고 적용해야 한다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"멀티 스레드","date":"June 11, 2022","description":null}},"previous":{"fields":{"slug":"/post1/"},"frontmatter":{"title":"프로세스와 스레드의 차이"}},"next":{"fields":{"slug":"/post3/"},"frontmatter":{"title":"브라우저 동작원리"}}},"pageContext":{"id":"a9a78922-b587-503e-bcbd-0e246c8d2dd0","previousPostId":"70136351-afbd-50e6-a1bb-7a861fa62d86","nextPostId":"2eca6e88-4a2a-5e07-afa4-bceebbf5f6c2"}},"staticQueryHashes":["2841359383","3257411868"]}