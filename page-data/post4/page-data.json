{"componentChunkName":"component---src-templates-blog-post-js","path":"/post4/","result":{"data":{"site":{"siteMetadata":{"title":"HYUK's SoftWare"}},"markdownRemark":{"id":"e04ffb7f-ca5c-5d70-9ad2-8f22529b4480","excerpt":"…","html":"<ul>\n<li><strong>브라우저의 동일 근원 정책에 의해 생겨난 타 도메인 간에 자원을 공유할 수 있게 해주는 것</strong>\n<ul>\n<li><strong>동일근원 정책이란 ?</strong>\n<ul>\n<li>다른 도메인으로부터 리소스가 요청될 경우 해당 리소스는 <code class=\"language-text\">cross-origin HTTP</code> 요청에 의해 요청되나 대부분의 브라우저들은 보안상의 이유로 스크립트에서 <code class=\"language-text\">cross-origin HTTP</code> 요청을 제한한다. 이것을 <code class=\"language-text\">Same-Origin-Policy</code>(동일 근원 정책)이라고 한다. 요청을 보내기 위해서는 요청을 보내고자 하는 대상과 프로토콜 및 포트가 같아야 함을 의미한다.</li>\n</ul>\n</li>\n<li><strong>해결방안</strong>\n<ul>\n<li>과거에는 flash를 proxy로 두고 타 도메인간 통신을 했으나 모바일 운영체제(IOS에서는 flash자체를 지원하지 않음)의 등장으로 제한</li>\n<li>JSONP(json-padding)\n<ul>\n<li><code class=\"language-text\">JSONP</code>란 jQuery v1.2이상 부터 지원되며, ajax호출 시 타 도메인 간에 호출이 가능 하게 해준다. 타 도메인간 자원 공유할 수 있는 몇가지 태그가 존재하는데 예를 들면 <code class=\"language-text\">img</code>, <code class=\"language-text\">iframe</code>, <code class=\"language-text\">anchor</code>, <code class=\"language-text\">script</code>, <code class=\"language-text\">link</code> 등이 존재한다.</li>\n</ul>\n</li>\n<li>Preflight Request(request.setHeader())\n<ul>\n<li>\n<p>실제 요청을 보내도 안전한지 판단하기 위해 <code class=\"language-text\">preflight</code> 요청을 먼저 보내는 방법, 실제 요청 전에 인증 헤더를 전송하여 서버의 허용 여부를 미리 체크하는 테스트 요청 이 요청으로 인해 트래픽이 증가할 수 있는데 서버의 헤더 설정으로 캐쉬가 가능 HTTP의 <code class=\"language-text\">OPTIONS</code> 메서드를 사용하며 <code class=\"language-text\">Access-Control-Request</code> 형태의 헤더로 전송함으로 써 브라우저가 해당 도메인에서 CORS를 허용하는지 알 수 있다.</p>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">HTTP Header</code></th>\n<th><code class=\"language-text\">Description</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Access-Control-Allow-Origin</td>\n<td>접근 가능한 url 설정</td>\n</tr>\n<tr>\n<td>Access-Control-Allow-Credentials</td>\n<td>접근 가능한 쿠키 설정</td>\n</tr>\n<tr>\n<td>Access-Control-Allow-Headers</td>\n<td>접근 가능한 헤더 설정</td>\n</tr>\n<tr>\n<td>Access-Control-Allow-Methods</td>\n<td>접근 가능한 http method 설정</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>REST API를 통한 처리</p>\n<ul>\n<li>클라이언트에서 바로 처리하지 않고 서버 단에서 <code class=\"language-text\">REST API</code>를 활용해 서버간에 응답 데이터를 받아와 클라이언트에 데이터를 전달해 주는 방식이다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CORS(Cross-Origin Resource Sharing )","date":"June 13, 2022","description":null}},"previous":{"fields":{"slug":"/post3/"},"frontmatter":{"title":"브라우저 동작원리"}},"next":{"fields":{"slug":"/post5/"},"frontmatter":{"title":"오버로딩 vs 오버라이딩"}}},"pageContext":{"id":"e04ffb7f-ca5c-5d70-9ad2-8f22529b4480","previousPostId":"2eca6e88-4a2a-5e07-afa4-bceebbf5f6c2","nextPostId":"d18eaa81-6067-53ab-8321-6c537103ea79"}},"staticQueryHashes":["2841359383","3257411868"]}