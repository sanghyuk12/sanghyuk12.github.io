{"componentChunkName":"component---src-templates-blog-post-js","path":"/post6/","result":{"data":{"site":{"siteMetadata":{"title":"HYUK's SoftWare"}},"markdownRemark":{"id":"c1f83ed3-ea04-557d-964f-49ffa182365a","excerpt":"Annotaion 이란? 자베에서 코드 사이에 주석처럼 쓰이며 특별한 의미, 기능을 수행하도록 하는 기술 즉, 프로그램에게 추가적인 정보를 제공해주는 메타데이터라고 볼 수 있따. Annotation…","html":"<ul>\n<li><strong>Annotaion 이란?</strong>\n<ul>\n<li>자베에서 코드 사이에 주석처럼 쓰이며 특별한 의미, 기능을 수행하도록 하는 기술 즉, 프로그램에게 추가적인 정보를 제공해주는 메타데이터라고 볼 수 있따.</li>\n</ul>\n</li>\n<li><strong>Annotation의 용도</strong>\n<ul>\n<li>컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공</li>\n<li>빌드나 배치시 코드릉 자동으로 생성할 수 있도록 정보를 제공</li>\n<li>실행시 특정 기능을 실행하도록 정보 제공</li>\n</ul>\n</li>\n<li><strong>Annotation의 사용 순서</strong>\n<ol>\n<li>어노테이션을 정의</li>\n<li>클래스에 어노테이션을 배치</li>\n<li>코드가 실행되는 중에 <strong>Reflection</strong>을 이용하여 추가 정보를 획득하여 기능을 실시</li>\n</ol>\n</li>\n<li><strong>Reflection 이란?</strong>\n<ul>\n<li>프로그램일 실행 중에 자신의 구조와 동작을 검사, 조사, 수정하는 것, 프로그래머가 데이터를 보여주고, 다른 포맷의 데이터를 처리하고, 통신을 위해 Serialization(직렬화)를 수행하고, bundling을 하기 위해 일반 소프트웨어 라이브러리를 만들도록 도와준다.</li>\n<li>Reflection을 사용할 경우 컴파일 타임에 인터페이스, 필드, 메소드의 이름을 알지 못해도 실행 중에 클래스, 인터페이스, 필드 및 메소드에 접근 할 수 있다. 또한 새로운 객체의 인스턴스화 및 메소드 호출을 허용한다. reflection을 사용하면 서드 파티 라이브러리 클래스에서 private 필드의 값을 변경할 수 있다. spring에서 BeanFactory라는 Container에서 객체가 호출되면 객체의 인스턴스를 생성하게 되는데 이 때 필요하게 된다. 즉, 프레임워크에서 유연성있는 동작을 위해 쓰인다.</li>\n<li>Annotation 자체는 아무런 동작을 가지지 않는 단순한 표식일 뿐이지만, Reflection을 이용하면 Annotation의 적용 여부와 엘리먼트 값을 읽고 처리할 수 있다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Spring Annotaion","date":"June 15, 2022","description":null}},"previous":{"fields":{"slug":"/post5/"},"frontmatter":{"title":"오버로딩 vs 오버라이딩"}},"next":{"fields":{"slug":"/post7/"},"frontmatter":{"title":"쿠키, 세션, 토큰(JWT)"}}},"pageContext":{"id":"c1f83ed3-ea04-557d-964f-49ffa182365a","previousPostId":"d18eaa81-6067-53ab-8321-6c537103ea79","nextPostId":"41268b05-e194-5398-8475-0fec22547808"}},"staticQueryHashes":["2841359383","3257411868"]}